
export const enum BlendShapeMode {
  BLEND_SHAPE_MODE_NORMALIZED = 0,
  BLEND_SHAPE_MODE_RELATIVE = 1
}
export const enum ArrayType {
  ARRAY_VERTEX = 0, // RG32F (2D), RGB32F, RGBA16 (compressed)
  ARRAY_NORMAL = 1, // RG16
  ARRAY_TANGENT = 2, // BA16 (with normal) or A16 (with vertex, when compressed)
  ARRAY_COLOR = 3, // RGBA8
  ARRAY_TEX_UV = 4, // RG32F or RG16
  ARRAY_TEX_UV2 = 5, // RG32F or RG16
  ARRAY_CUSTOM0 = 6, // Depends on ArrayCustomFormat.
  ARRAY_CUSTOM1 = 7,
  ARRAY_CUSTOM2 = 8,
  ARRAY_CUSTOM3 = 9,
  ARRAY_BONES = 10, // RGBA16UI (x2 if 8 weights)
  ARRAY_WEIGHTS = 11, // RGBA16UNORM (x2 if 8 weights)
  ARRAY_INDEX = 12, // 16 or 32 bits depending on length > 0xFFFF.
  ARRAY_MAX = 13
}

export const enum PrimitiveType {
  PRIMITIVE_POINTS,
  PRIMITIVE_LINES,
  PRIMITIVE_LINE_STRIP,
  PRIMITIVE_TRIANGLES,
  PRIMITIVE_TRIANGLE_STRIP,
  PRIMITIVE_MAX,
}

export const enum ArrayCustomFormat {
  ARRAY_CUSTOM_RGBA8_UNORM,
  ARRAY_CUSTOM_RGBA8_SNORM,
  ARRAY_CUSTOM_RG_HALF,
  ARRAY_CUSTOM_RGBA_HALF,
  ARRAY_CUSTOM_R_FLOAT,
  ARRAY_CUSTOM_RG_FLOAT,
  ARRAY_CUSTOM_RGB_FLOAT,
  ARRAY_CUSTOM_RGBA_FLOAT,
  ARRAY_CUSTOM_MAX
}

export const enum ArrayFormat {
  /* ARRAY FORMAT FLAGS */
  ARRAY_FORMAT_VERTEX = 1 << ArrayType.ARRAY_VERTEX,
  ARRAY_FORMAT_NORMAL = 1 << ArrayType.ARRAY_NORMAL,
  ARRAY_FORMAT_TANGENT = 1 << ArrayType.ARRAY_TANGENT,
  ARRAY_FORMAT_COLOR = 1 << ArrayType.ARRAY_COLOR,
  ARRAY_FORMAT_TEX_UV = 1 << ArrayType.ARRAY_TEX_UV,
  ARRAY_FORMAT_TEX_UV2 = 1 << ArrayType.ARRAY_TEX_UV2,
  ARRAY_FORMAT_CUSTOM0 = 1 << ArrayType.ARRAY_CUSTOM0,
  ARRAY_FORMAT_CUSTOM1 = 1 << ArrayType.ARRAY_CUSTOM1,
  ARRAY_FORMAT_CUSTOM2 = 1 << ArrayType.ARRAY_CUSTOM2,
  ARRAY_FORMAT_CUSTOM3 = 1 << ArrayType.ARRAY_CUSTOM3,
  ARRAY_FORMAT_BONES = 1 << ArrayType.ARRAY_BONES,
  ARRAY_FORMAT_WEIGHTS = 1 << ArrayType.ARRAY_WEIGHTS,
  ARRAY_FORMAT_INDEX = 1 << ArrayType.ARRAY_INDEX,

  ARRAY_FORMAT_BLEND_SHAPE_MASK = ARRAY_FORMAT_VERTEX | ARRAY_FORMAT_NORMAL | ARRAY_FORMAT_TANGENT,

  ARRAY_FORMAT_CUSTOM_BASE = (ArrayType.ARRAY_INDEX + 1),
  ARRAY_FORMAT_CUSTOM_BITS = 3,
  ARRAY_FORMAT_CUSTOM_MASK = 0x7,
  ARRAY_FORMAT_CUSTOM0_SHIFT = (ARRAY_FORMAT_CUSTOM_BASE + 0),
  ARRAY_FORMAT_CUSTOM1_SHIFT = (ARRAY_FORMAT_CUSTOM_BASE + ARRAY_FORMAT_CUSTOM_BITS),
  ARRAY_FORMAT_CUSTOM2_SHIFT = (ARRAY_FORMAT_CUSTOM_BASE + ARRAY_FORMAT_CUSTOM_BITS * 2),
  ARRAY_FORMAT_CUSTOM3_SHIFT = (ARRAY_FORMAT_CUSTOM_BASE + ARRAY_FORMAT_CUSTOM_BITS * 3),

  ARRAY_COMPRESS_FLAGS_BASE = (ArrayType.ARRAY_INDEX + 1 + 12),

  ARRAY_FLAG_USE_2D_VERTICES = 1 << (ARRAY_COMPRESS_FLAGS_BASE + 0),
  ARRAY_FLAG_USE_DYNAMIC_UPDATE = 1 << (ARRAY_COMPRESS_FLAGS_BASE + 1),
  ARRAY_FLAG_USE_8_BONE_WEIGHTS = 1 << (ARRAY_COMPRESS_FLAGS_BASE + 2),

  ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY = 1 << (ARRAY_COMPRESS_FLAGS_BASE + 3),

  ARRAY_FLAG_COMPRESS_ATTRIBUTES = 1 << (ARRAY_COMPRESS_FLAGS_BASE + 4)
}

export const ARRAY_FLAG_MASK = 0xFFFFFFFFn;

// We leave enough room for up to 5 more compression flags.

export const ARRAY_FLAG_FORMAT_VERSION_BASE = ArrayFormat.ARRAY_COMPRESS_FLAGS_BASE + 10,
  ARRAY_FLAG_FORMAT_VERSION_SHIFT = ARRAY_FLAG_FORMAT_VERSION_BASE,
  // When changes are made to the mesh format, add a new version and use it for the CURRENT_VERSION.
  ARRAY_FLAG_FORMAT_VERSION_1 = 0,
  ARRAY_FLAG_FORMAT_VERSION_2 = 1n << BigInt(ARRAY_FLAG_FORMAT_VERSION_SHIFT),
  ARRAY_FLAG_FORMAT_CURRENT_VERSION = ARRAY_FLAG_FORMAT_VERSION_2,
  ARRAY_FLAG_FORMAT_VERSION_MASK = 0xFF; // 8 bits version